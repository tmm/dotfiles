# Based on https://github.com/epilande/vim-react-snippets
extends typescript

snippet pt "Props type" w
type Props = {
	$1: $2
}$0
endsnippet

snippet fc "Function component" w
${2:export }const ${3:Component} = (${4:props}) => {
	return ${5:null}
}
endsnippet

snippet us.cb "useCallback" w
const $1 = React.useCallback(() => {
	$2
}, [$3])$0
endsnippet

snippet us.e "useEffect" w
React.useEffect(() => {
  $1
}, ${3:[]})$0
endsnippet

snippet us.er "useEffect with return" w
React.useEffect(() => {
	$1
	return () => {
		$2
	}
}, ${3:[]})$0
endsnippet

snippet us.m "useMemo" w
const $1 = React.useMemo(() => {
  $2
}, [$3])$0
endsnippet

snippet us.r "useReducer" w
type State = {}
const initialState: State = {}

type Action = { type: 'default' }
const reducer = (state: State, action: Action) => {
	switch (action.type) {
		case 'default':
			return state
	}
}

const [state, dispatch] = React.useReducer<React.Reducer<State, Action>>(reducer, initialState)$0
endsnippet

snippet us.rf "useRef" w
const $1 = React.useRef${2:<string>}($2)$0
endsnippet

snippet us.s "useState" w
type State = {}
const initialState: State = {}

const [state, setState] = React.useState<State>(initialState)$0
endsnippet
